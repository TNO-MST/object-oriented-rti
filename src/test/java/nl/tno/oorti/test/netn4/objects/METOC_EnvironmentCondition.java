// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.objects;

import nl.tno.oorti.test.mim4.objects.HLAobjectRoot;
import nl.tno.oorti.test.netn4.datatypes.GeoReferenceVariant;

/**
 * Root class for all types of environment condition objects.
 *
 * <p>The `GeoReference` attribute defines the region where the EnvironmentCondition applies.
 *
 * <p>If `GeoReference` is a geographical area, and the subclass in question has a surface
 * (water/land), the environmental condition applies only within that area of the surface.
 *
 * <p>If `GeoReference` is a geographical area, and the environmental condition defines a Layer
 * attribute, it applies only within the volume bounded by the layer and the body described by
 * projecting each point of the area along a line through the centre of the Earth.
 *
 * <p>If `GeoReference` is an `RPREntityReference`, a NETNEntityReference or a GMLFeatureReference,
 * the environment condition applies only to the immediate vicinity of the referenced entity/feature
 * and any layer attribute is ignored.
 *
 * <p>If not provided, the environment condition is considered global, only restricted by the
 * semantics of its particular subclass.
 */
public class METOC_EnvironmentCondition extends HLAobjectRoot {

  /** Optional. A geographical location, region, feature or simulated object. */
  GeoReferenceVariant GeoReference;

  /** Optional: Reference to the METOC service that generated this Environment Condition. */
  String METOC__Service;

  /**
   * Optional: Indication of priority when calculating overlapping environment conditions of the
   * same type. If Overlapping environment conditions of the same type, e.g., TroposphereLayer,
   * exists, then the environment condition with the highest priority takes precedence. If multiple
   * environment conditions with the same highest condition exists, use the NETN-METOC merging
   * rules.
   */
  Short Priority;

  public GeoReferenceVariant getGeoReference() {
    return this.GeoReference;
  }

  public void setGeoReference(GeoReferenceVariant GeoReference) {
    this.GeoReference = GeoReference;
  }

  public String getMETOC____Service() {
    return this.METOC__Service;
  }

  public void setMETOC____Service(String METOC__Service) {
    this.METOC__Service = METOC__Service;
  }

  public Short getPriority() {
    return this.Priority;
  }

  public void setPriority(Short Priority) {
    this.Priority = Priority;
  }
}
