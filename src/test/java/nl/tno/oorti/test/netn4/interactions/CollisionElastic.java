// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.interactions;

import nl.tno.oorti.test.netn4.datatypes.EntityCoordinateVectorStruct;

/**
 * The act or instance of coming together with solid impact in an elastic manner. An elastic
 * collision allows a higher fidelity collision to be modeled, taking into account linear and
 * rotational momentum transfer, variable elasticity, and momentum transfer that is dependent on
 * surface orientation.
 */
public class CollisionElastic extends Collision {

  /** The degree that energy is conserved in a collision. */
  Float CoefficientOfRestitution;

  /** X-X Component of the positive semi-definite Collision Intermediate Result matrix. */
  Float IntermediateResultXX;

  /** X-Y Component of the positive semi-definite Collision Intermediate Result matrix. */
  Float IntermediateResultXY;

  /** X-Z Component of the positive semi-definite Collision Intermediate Result matrix. */
  Float IntermediateResultXZ;

  /** Y-Y Component of the positive semi-definite Collision Intermediate Result matrix. */
  Float IntermediateResultYY;

  /** Y-Z Component of the positive semi-definite Collision Intermediate Result matrix. */
  Float IntermediateResultYZ;

  /** Z-Z Component of the positive semi-definite Collision Intermediate Result matrix. */
  Float IntermediateResultZZ;

  /** The normal vector to the surface at the point of collision detection. */
  EntityCoordinateVectorStruct UnitSurfaceNormal;

  public Float getCoefficientOfRestitution() {
    return this.CoefficientOfRestitution;
  }

  public void setCoefficientOfRestitution(Float CoefficientOfRestitution) {
    this.CoefficientOfRestitution = CoefficientOfRestitution;
  }

  public Float getIntermediateResultXX() {
    return this.IntermediateResultXX;
  }

  public void setIntermediateResultXX(Float IntermediateResultXX) {
    this.IntermediateResultXX = IntermediateResultXX;
  }

  public Float getIntermediateResultXY() {
    return this.IntermediateResultXY;
  }

  public void setIntermediateResultXY(Float IntermediateResultXY) {
    this.IntermediateResultXY = IntermediateResultXY;
  }

  public Float getIntermediateResultXZ() {
    return this.IntermediateResultXZ;
  }

  public void setIntermediateResultXZ(Float IntermediateResultXZ) {
    this.IntermediateResultXZ = IntermediateResultXZ;
  }

  public Float getIntermediateResultYY() {
    return this.IntermediateResultYY;
  }

  public void setIntermediateResultYY(Float IntermediateResultYY) {
    this.IntermediateResultYY = IntermediateResultYY;
  }

  public Float getIntermediateResultYZ() {
    return this.IntermediateResultYZ;
  }

  public void setIntermediateResultYZ(Float IntermediateResultYZ) {
    this.IntermediateResultYZ = IntermediateResultYZ;
  }

  public Float getIntermediateResultZZ() {
    return this.IntermediateResultZZ;
  }

  public void setIntermediateResultZZ(Float IntermediateResultZZ) {
    this.IntermediateResultZZ = IntermediateResultZZ;
  }

  public EntityCoordinateVectorStruct getUnitSurfaceNormal() {
    return this.UnitSurfaceNormal;
  }

  public void setUnitSurfaceNormal(EntityCoordinateVectorStruct UnitSurfaceNormal) {
    this.UnitSurfaceNormal = UnitSurfaceNormal;
  }
}
