// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.objects;

import java.util.UUID;
import nl.tno.oorti.test.netn4.datatypes.AggregateMarkingStruct;
import nl.tno.oorti.test.netn4.datatypes.AggregateStateEnum8;
import nl.tno.oorti.test.netn4.datatypes.DimensionStruct;
import nl.tno.oorti.test.netn4.datatypes.EchelonEnum32;
import nl.tno.oorti.test.netn4.datatypes.ForceIdentifierEnum8;
import nl.tno.oorti.test.netn4.datatypes.FormationEnum32;
import nl.tno.oorti.test.netn4.datatypes.ResourceStatusStruct;
import nl.tno.oorti.test.netn4.datatypes.SilentAggregateStruct;
import nl.tno.oorti.test.netn4.datatypes.SilentEntityStruct;
import nl.tno.oorti.test.netn4.datatypes.SupplyStatusStruct;
import nl.tno.oorti.test.netn4.datatypes.VariableDatumStruct;
import nl.tno.oorti.test.netn4.datatypes.WeaponControlOrderEnum8;

/**
 * A group of one or more separate objects that operate together as part of an organization. These
 * objects may be discrete, may be other aggregate objects, or may be a mixture of both.
 */
public class AggregateEntity extends BaseEntity {

  /**
   * Optional. Use the echelon symbol-modifier to specify the size of the AggregateEntity (level of
   * command). Derive default value based on `EntityType`.
   */
  EchelonEnum32 Echelon;

  /**
   * Optional. A summary value of the effectiveness (the level of training, leadership, morale,
   * personnel and equipment operational status). Default is 100%.
   */
  Float CombatValue;

  /**
   * Optional. Describes current Weapon Control Order as Free, Tight, or Hold. Default is 0 = Other.
   */
  WeaponControlOrderEnum8 WeaponsControlOrder;

  /** Required. The type and total quantities of supply holdings modelled by this entity. */
  SupplyStatusStruct[] Supplies;

  /** Required. The total amount and status of equipment holdings represented by this entity. */
  ResourceStatusStruct[] Equipment;

  /** Required. The total amount and status of all personnel holdings modelled by this entity. */
  ResourceStatusStruct[] Personnel;

  /**
   * Optional. Reference to other aggregate or physical entities divided from the `AggregateEntity`
   * to represent specific subsets of holdings.
   */
  UUID[] DividedEntities;

  /**
   * Optional. Reference to the disaggregated entities after disaggregation of this
   * `AggregateEntity`. Each element should refer to an existing entity in the federation. The
   * `Status` of this `AggregateEntity` shall be inactive if disaggregated entities exist.|
   */
  UUID[] DisaggregatedEntities;

  /**
   * A unique marking or combination of characters used to distinguish the aggregate from other
   * aggregates.
   */
  AggregateMarkingStruct AggregateMarking;

  /** An indicator of the extent of association of objects form an operating group. */
  AggregateStateEnum8 AggregateState;

  /** The size of the area covered by the units in the aggregate. */
  DimensionStruct Dimensions;

  /** The identification of entities that are contained within the aggregate. */
  String[] EntityIdentifiers;

  /** The identification of the force that the aggregate belongs to. */
  ForceIdentifierEnum8 ForceIdentifier;

  /** The category of positional arrangement of the entities within the aggregate. */
  FormationEnum32 Formation;

  /** The number of elements in the SilentEntities list. */
  Short NumberOfSilentEntities;

  /** The number of records in the VariableDatums structure. */
  Integer NumberOfVariableDatums;

  /**
   * The numbers and types, of silent aggregates contained in the aggregate. Silent aggregates are
   * sub-aggregates that are in the aggregate, but that are not separately represented in the
   * virtual world.
   */
  SilentAggregateStruct[] SilentAggregates;

  /**
   * The numbers and types, of silent entities in the aggregate. Silent entities are entities that
   * are in the aggregate, but that are not separately represented in the virtual world.
   */
  SilentEntityStruct[] SilentEntities;

  /**
   * The identifications of aggregates represented in the virtual world that are contained in the
   * aggregate.
   */
  String[] SubAggregateIdentifiers;

  /** Extra data that describes the aggregate. */
  VariableDatumStruct[] VariableDatums;

  public EchelonEnum32 getEchelon() {
    return this.Echelon;
  }

  public void setEchelon(EchelonEnum32 Echelon) {
    this.Echelon = Echelon;
  }

  public Float getCombatValue() {
    return this.CombatValue;
  }

  public void setCombatValue(Float CombatValue) {
    this.CombatValue = CombatValue;
  }

  public WeaponControlOrderEnum8 getWeaponsControlOrder() {
    return this.WeaponsControlOrder;
  }

  public void setWeaponsControlOrder(WeaponControlOrderEnum8 WeaponsControlOrder) {
    this.WeaponsControlOrder = WeaponsControlOrder;
  }

  public SupplyStatusStruct[] getSupplies() {
    return this.Supplies;
  }

  public void setSupplies(SupplyStatusStruct[] Supplies) {
    this.Supplies = Supplies;
  }

  public ResourceStatusStruct[] getEquipment() {
    return this.Equipment;
  }

  public void setEquipment(ResourceStatusStruct[] Equipment) {
    this.Equipment = Equipment;
  }

  public ResourceStatusStruct[] getPersonnel() {
    return this.Personnel;
  }

  public void setPersonnel(ResourceStatusStruct[] Personnel) {
    this.Personnel = Personnel;
  }

  public UUID[] getDividedEntities() {
    return this.DividedEntities;
  }

  public void setDividedEntities(UUID[] DividedEntities) {
    this.DividedEntities = DividedEntities;
  }

  public UUID[] getDisaggregatedEntities() {
    return this.DisaggregatedEntities;
  }

  public void setDisaggregatedEntities(UUID[] DisaggregatedEntities) {
    this.DisaggregatedEntities = DisaggregatedEntities;
  }

  public AggregateMarkingStruct getAggregateMarking() {
    return this.AggregateMarking;
  }

  public void setAggregateMarking(AggregateMarkingStruct AggregateMarking) {
    this.AggregateMarking = AggregateMarking;
  }

  public AggregateStateEnum8 getAggregateState() {
    return this.AggregateState;
  }

  public void setAggregateState(AggregateStateEnum8 AggregateState) {
    this.AggregateState = AggregateState;
  }

  public DimensionStruct getDimensions() {
    return this.Dimensions;
  }

  public void setDimensions(DimensionStruct Dimensions) {
    this.Dimensions = Dimensions;
  }

  public String[] getEntityIdentifiers() {
    return this.EntityIdentifiers;
  }

  public void setEntityIdentifiers(String[] EntityIdentifiers) {
    this.EntityIdentifiers = EntityIdentifiers;
  }

  public ForceIdentifierEnum8 getForceIdentifier() {
    return this.ForceIdentifier;
  }

  public void setForceIdentifier(ForceIdentifierEnum8 ForceIdentifier) {
    this.ForceIdentifier = ForceIdentifier;
  }

  public FormationEnum32 getFormation() {
    return this.Formation;
  }

  public void setFormation(FormationEnum32 Formation) {
    this.Formation = Formation;
  }

  public Short getNumberOfSilentEntities() {
    return this.NumberOfSilentEntities;
  }

  public void setNumberOfSilentEntities(Short NumberOfSilentEntities) {
    this.NumberOfSilentEntities = NumberOfSilentEntities;
  }

  public Integer getNumberOfVariableDatums() {
    return this.NumberOfVariableDatums;
  }

  public void setNumberOfVariableDatums(Integer NumberOfVariableDatums) {
    this.NumberOfVariableDatums = NumberOfVariableDatums;
  }

  public SilentAggregateStruct[] getSilentAggregates() {
    return this.SilentAggregates;
  }

  public void setSilentAggregates(SilentAggregateStruct[] SilentAggregates) {
    this.SilentAggregates = SilentAggregates;
  }

  public SilentEntityStruct[] getSilentEntities() {
    return this.SilentEntities;
  }

  public void setSilentEntities(SilentEntityStruct[] SilentEntities) {
    this.SilentEntities = SilentEntities;
  }

  public String[] getSubAggregateIdentifiers() {
    return this.SubAggregateIdentifiers;
  }

  public void setSubAggregateIdentifiers(String[] SubAggregateIdentifiers) {
    this.SubAggregateIdentifiers = SubAggregateIdentifiers;
  }

  public VariableDatumStruct[] getVariableDatums() {
    return this.VariableDatums;
  }

  public void setVariableDatums(VariableDatumStruct[] VariableDatums) {
    this.VariableDatums = VariableDatums;
  }
}
