// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.objects;

import java.util.UUID;
import nl.tno.oorti.test.netn4.datatypes.EchelonEnum32;
import nl.tno.oorti.test.netn4.datatypes.FormationStruct;
import nl.tno.oorti.test.netn4.datatypes.Holding;

/**
 * A unit represents an element at a specified level in the organization. An organizational unit can
 * contain subunits and can belong to a superior unit. A unit consists of equipment, personnel and
 * supplies; these holdings can belong directly to the unit or indirectly as a holding of a subunit.
 */
public class Unit extends OrganizationElement {

  /** Optional: A list of communication networks available for the unit. */
  UUID[] CommunicationNetworks;

  /**
   * Optional. A reference to a unit representing the superior headquarters. The default value is
   * all zeros (no higher headquarters).
   */
  UUID HigherHeadquarters;

  /** Optional. Symbol modifier identifying the command level. Default NONE. */
  EchelonEnum32 Echelon;

  /**
   * Optional. Indicate whether the unit has a command function, e.g. if it is an HQ or not. The
   * default is FALSE, no HQ.
   */
  Boolean IsHq;

  /**
   * Optional. A set of holdings defined for this unit in addition to holdings defined for all
   * subunits and any specific `Equipment` objects with this unit as `HostUnit . The default is an
   * empty list.`
   */
  Holding[] Holdings;

  /** Optional. Formation of this unit. */
  FormationStruct Formation;

  public UUID[] getCommunicationNetworks() {
    return this.CommunicationNetworks;
  }

  public void setCommunicationNetworks(UUID[] CommunicationNetworks) {
    this.CommunicationNetworks = CommunicationNetworks;
  }

  public UUID getHigherHeadquarters() {
    return this.HigherHeadquarters;
  }

  public void setHigherHeadquarters(UUID HigherHeadquarters) {
    this.HigherHeadquarters = HigherHeadquarters;
  }

  public EchelonEnum32 getEchelon() {
    return this.Echelon;
  }

  public void setEchelon(EchelonEnum32 Echelon) {
    this.Echelon = Echelon;
  }

  public Boolean getIsHq() {
    return this.IsHq;
  }

  public void setIsHq(Boolean IsHq) {
    this.IsHq = IsHq;
  }

  public Holding[] getHoldings() {
    return this.Holdings;
  }

  public void setHoldings(Holding[] Holdings) {
    this.Holdings = Holdings;
  }

  public FormationStruct getFormation() {
    return this.Formation;
  }

  public void setFormation(FormationStruct Formation) {
    this.Formation = Formation;
  }
}
