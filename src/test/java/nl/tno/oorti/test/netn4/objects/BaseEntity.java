// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.objects;

import java.util.UUID;
import nl.tno.oorti.test.mim4.objects.HLAobjectRoot;
import nl.tno.oorti.test.netn4.datatypes.ActiveStatusEnum8;
import nl.tno.oorti.test.netn4.datatypes.CaptureStatusEnum8;
import nl.tno.oorti.test.netn4.datatypes.EntityControlActionEnum;
import nl.tno.oorti.test.netn4.datatypes.EntityIdentifierStruct;
import nl.tno.oorti.test.netn4.datatypes.EntityTypeStruct;
import nl.tno.oorti.test.netn4.datatypes.IncomingConnectionStruct;
import nl.tno.oorti.test.netn4.datatypes.IsPartOfStruct;
import nl.tno.oorti.test.netn4.datatypes.SensorStruct;
import nl.tno.oorti.test.netn4.datatypes.SignatureVariant;
import nl.tno.oorti.test.netn4.datatypes.SpatialVariantStruct;
import nl.tno.oorti.test.netn4.datatypes.SymbolStruct;
import nl.tno.oorti.test.netn4.datatypes.TaskDefinition;
import nl.tno.oorti.test.netn4.datatypes.TaskProgress;

/**
 * A base class of aggregate and discrete scenario domain participants. The BaseEntity class is
 * characterized by being located at a particular location in space and independently movable, if
 * capable of movement at all. It specifically excludes elements normally considered to be a
 * component of another element. The BaseEntity class is intended to be a container for common
 * attributes for entities of this type. Since it lacks sufficient class specific attributes that
 * are required for simulation purposes, federates cannot publish objects of this class. Certain
 * simulation management federates, e.g. viewers, may subscribe to this class. Simulation federates
 * will normally subscribe to one of the subclasses, to gain the extra information required to
 * properly simulate the entity.
 */
public class BaseEntity extends HLAobjectRoot {

  /**
   * Optional. All incoming communication connections to the receiving simulated entity. Any
   * messages sent on a CommunicationNetwork with a Connection of sufficient quality should be
   * received by this entity and processed if the entity is the intended recipient.
   */
  IncomingConnectionStruct[] IncomingConnections;

  /**
   * Optional: The callsign is a unique-designator. Use the RPR-FOM `PhysicalEntity` attribute
   * `Marking` or the `AggregateEntity` attribute `AggregateMarking` as default value. Max length 21
   * characters.
   */
  String Callsign;

  /**
   * Optional. A symbol identifier and additional amplification. Derive default value based on
   * `EntityType`.
   */
  SymbolStruct Symbol;

  /**
   * Optional. Reference to the simulation entity this platform is mounted on or embedded in.
   * Default is all zeros.
   */
  UUID HostEntity;

  /**
   * Optional. An entity's additional level of protection against the effects of weapons fire. E.g.,
   * cover, fortification, etc. Default is 0 = fully affected by weapon fire.
   */
  Float ProtectionLevel;

  /**
   * Optional: A set of signatures to characterize this entity's susceptibility to detection.
   * Default is No Signatures = Empty.
   */
  SignatureVariant[] Signatures;

  /** Optional: A set of sensors associated with the entity. Default is No sensors = Empty. */
  SensorStruct[] Sensors;

  /**
   * Optional: The status of an entity's level of control or influence over its activities. The
   * Default is 0 = Other.
   */
  CaptureStatusEnum8 CaptureStatus;

  /** Optional. An array of currently executing tasks. */
  TaskDefinition[] CurrentTasks;

  /** Optional. An array of progress for current tasks. */
  TaskProgress[] TaskProgress;

  /** Optional. An array of all planned tasks. */
  TaskDefinition[] PlannedTasks;

  /** Optional. An array of completed or cancelled tasks. */
  TaskDefinition[] PreviousTasks;

  /**
   * Optional. Indicates if this entity is currently being simulated or not. During an inactive
   * state, the attribute values may not reflect accurate or current values. All attributes are
   * updated to represent the current status of the object instance before setting the state to
   * Active. The default is `Active`.
   */
  ActiveStatusEnum8 Status;

  /**
   * Optional. Reference to an active `AggregateEnity` instance which is the source of a NETN-MRM
   * division. The default value is all zeros representing no source AggregateEntity.
   */
  UUID SourceAggregate;

  /**
   * Optional. If this simulation entity results from a disaggregation, this attribute refers to the
   * disaggregated `AggregateEntity`. The default value is no reference, i.e. all zeros.
   */
  UUID ParentAggregate;

  /**
   * Optional: Reference to an existing NETN-ORG organization element, e.g. a `Unit` or `Equipment`
   * represented by this simulation entity. The default value is no related organization element,
   * i.e. all zeros.
   */
  UUID OrganizationElement;

  /** Optional: The organization in the scenario this entity belongs to. */
  UUID Organization;

  /** Optional: Indicates what control actions are supported by an individual simulated entity. */
  EntityControlActionEnum[] SupportedActions;

  /** The category of the entity. */
  EntityTypeStruct EntityType;

  /** The unique identifier for the entity instance. */
  EntityIdentifierStruct EntityIdentifier;

  /**
   * Defines if the entity if a constituent part of another entity (denoted the host entity). If the
   * entity is a constituent part of another entity then the HostEntityIdentifier shall be set to
   * the EntityIdentifier of the host entity and the HostRTIObjectIdentifier shall be set to the RTI
   * object instance ID of the host entity. If the entity is not a constituent part of another
   * entity then the HostEntityIdentifier shall be set to 0.0.0 and the HostRTIObjectIdentifier
   * shall be set to the empty string.
   */
  IsPartOfStruct IsPartOf;

  /** Spatial state stored in one variant record attribute. */
  SpatialVariantStruct Spatial;

  /** Relative spatial state stored in one variant record attribute. */
  SpatialVariantStruct RelativeSpatial;

  public IncomingConnectionStruct[] getIncomingConnections() {
    return this.IncomingConnections;
  }

  public void setIncomingConnections(IncomingConnectionStruct[] IncomingConnections) {
    this.IncomingConnections = IncomingConnections;
  }

  public String getCallsign() {
    return this.Callsign;
  }

  public void setCallsign(String Callsign) {
    this.Callsign = Callsign;
  }

  public SymbolStruct getSymbol() {
    return this.Symbol;
  }

  public void setSymbol(SymbolStruct Symbol) {
    this.Symbol = Symbol;
  }

  public UUID getHostEntity() {
    return this.HostEntity;
  }

  public void setHostEntity(UUID HostEntity) {
    this.HostEntity = HostEntity;
  }

  public Float getProtectionLevel() {
    return this.ProtectionLevel;
  }

  public void setProtectionLevel(Float ProtectionLevel) {
    this.ProtectionLevel = ProtectionLevel;
  }

  public SignatureVariant[] getSignatures() {
    return this.Signatures;
  }

  public void setSignatures(SignatureVariant[] Signatures) {
    this.Signatures = Signatures;
  }

  public SensorStruct[] getSensors() {
    return this.Sensors;
  }

  public void setSensors(SensorStruct[] Sensors) {
    this.Sensors = Sensors;
  }

  public CaptureStatusEnum8 getCaptureStatus() {
    return this.CaptureStatus;
  }

  public void setCaptureStatus(CaptureStatusEnum8 CaptureStatus) {
    this.CaptureStatus = CaptureStatus;
  }

  public TaskDefinition[] getCurrentTasks() {
    return this.CurrentTasks;
  }

  public void setCurrentTasks(TaskDefinition[] CurrentTasks) {
    this.CurrentTasks = CurrentTasks;
  }

  public TaskProgress[] getTaskProgress() {
    return this.TaskProgress;
  }

  public void setTaskProgress(TaskProgress[] TaskProgress) {
    this.TaskProgress = TaskProgress;
  }

  public TaskDefinition[] getPlannedTasks() {
    return this.PlannedTasks;
  }

  public void setPlannedTasks(TaskDefinition[] PlannedTasks) {
    this.PlannedTasks = PlannedTasks;
  }

  public TaskDefinition[] getPreviousTasks() {
    return this.PreviousTasks;
  }

  public void setPreviousTasks(TaskDefinition[] PreviousTasks) {
    this.PreviousTasks = PreviousTasks;
  }

  public ActiveStatusEnum8 getStatus() {
    return this.Status;
  }

  public void setStatus(ActiveStatusEnum8 Status) {
    this.Status = Status;
  }

  public UUID getSourceAggregate() {
    return this.SourceAggregate;
  }

  public void setSourceAggregate(UUID SourceAggregate) {
    this.SourceAggregate = SourceAggregate;
  }

  public UUID getParentAggregate() {
    return this.ParentAggregate;
  }

  public void setParentAggregate(UUID ParentAggregate) {
    this.ParentAggregate = ParentAggregate;
  }

  public UUID getOrganizationElement() {
    return this.OrganizationElement;
  }

  public void setOrganizationElement(UUID OrganizationElement) {
    this.OrganizationElement = OrganizationElement;
  }

  public UUID getOrganization() {
    return this.Organization;
  }

  public void setOrganization(UUID Organization) {
    this.Organization = Organization;
  }

  public EntityControlActionEnum[] getSupportedActions() {
    return this.SupportedActions;
  }

  public void setSupportedActions(EntityControlActionEnum[] SupportedActions) {
    this.SupportedActions = SupportedActions;
  }

  public EntityTypeStruct getEntityType() {
    return this.EntityType;
  }

  public void setEntityType(EntityTypeStruct EntityType) {
    this.EntityType = EntityType;
  }

  public EntityIdentifierStruct getEntityIdentifier() {
    return this.EntityIdentifier;
  }

  public void setEntityIdentifier(EntityIdentifierStruct EntityIdentifier) {
    this.EntityIdentifier = EntityIdentifier;
  }

  public IsPartOfStruct getIsPartOf() {
    return this.IsPartOf;
  }

  public void setIsPartOf(IsPartOfStruct IsPartOf) {
    this.IsPartOf = IsPartOf;
  }

  public SpatialVariantStruct getSpatial() {
    return this.Spatial;
  }

  public void setSpatial(SpatialVariantStruct Spatial) {
    this.Spatial = Spatial;
  }

  public SpatialVariantStruct getRelativeSpatial() {
    return this.RelativeSpatial;
  }

  public void setRelativeSpatial(SpatialVariantStruct RelativeSpatial) {
    this.RelativeSpatial = RelativeSpatial;
  }
}
