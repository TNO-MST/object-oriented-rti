// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.objects;

import nl.tno.oorti.test.netn4.datatypes.AccelerationVectorStruct;
import nl.tno.oorti.test.netn4.datatypes.DeadReckoningAlgorithmEnum8;
import nl.tno.oorti.test.netn4.datatypes.DesignatorCodeEnum16;
import nl.tno.oorti.test.netn4.datatypes.DesignatorCodeNameEnum16;
import nl.tno.oorti.test.netn4.datatypes.RelativePositionStruct;
import nl.tno.oorti.test.netn4.datatypes.WorldLocationStruct;

/**
 * A system used to designate or mark a location or object, such as a laser designator which
 * supports a laser-guided weapon engagement.
 */
public class Designator extends EmbeddedSystem {

  /** The code name of the designator system. */
  DesignatorCodeNameEnum16 CodeName;

  /** The object instance ID of the entity that is currently being designated (if any). */
  String DesignatedObjectIdentifier;

  /** The designator code being used by the designating entity. */
  DesignatorCodeEnum16 DesignatorCode;

  /** The wavelength of the designator system. */
  Float DesignatorEmissionWavelength;

  /** The output power of the designator system. */
  Float DesignatorOutputPower;

  /** The location, in the world coordinate system, of the designator spot. */
  WorldLocationStruct DesignatorSpotLocation;

  /** Dead reckoning algorithm used by the issuing object. */
  DeadReckoningAlgorithmEnum8 DeadReckoningAlgorithm;

  /** The location of the designator spot, relative to the object being designated (if any). */
  RelativePositionStruct RelativeSpotLocation;

  /** The rate of change in linear velocity of the designator spot over time. */
  AccelerationVectorStruct SpotLinearAccelerationVector;

  public DesignatorCodeNameEnum16 getCodeName() {
    return this.CodeName;
  }

  public void setCodeName(DesignatorCodeNameEnum16 CodeName) {
    this.CodeName = CodeName;
  }

  public String getDesignatedObjectIdentifier() {
    return this.DesignatedObjectIdentifier;
  }

  public void setDesignatedObjectIdentifier(String DesignatedObjectIdentifier) {
    this.DesignatedObjectIdentifier = DesignatedObjectIdentifier;
  }

  public DesignatorCodeEnum16 getDesignatorCode() {
    return this.DesignatorCode;
  }

  public void setDesignatorCode(DesignatorCodeEnum16 DesignatorCode) {
    this.DesignatorCode = DesignatorCode;
  }

  public Float getDesignatorEmissionWavelength() {
    return this.DesignatorEmissionWavelength;
  }

  public void setDesignatorEmissionWavelength(Float DesignatorEmissionWavelength) {
    this.DesignatorEmissionWavelength = DesignatorEmissionWavelength;
  }

  public Float getDesignatorOutputPower() {
    return this.DesignatorOutputPower;
  }

  public void setDesignatorOutputPower(Float DesignatorOutputPower) {
    this.DesignatorOutputPower = DesignatorOutputPower;
  }

  public WorldLocationStruct getDesignatorSpotLocation() {
    return this.DesignatorSpotLocation;
  }

  public void setDesignatorSpotLocation(WorldLocationStruct DesignatorSpotLocation) {
    this.DesignatorSpotLocation = DesignatorSpotLocation;
  }

  public DeadReckoningAlgorithmEnum8 getDeadReckoningAlgorithm() {
    return this.DeadReckoningAlgorithm;
  }

  public void setDeadReckoningAlgorithm(DeadReckoningAlgorithmEnum8 DeadReckoningAlgorithm) {
    this.DeadReckoningAlgorithm = DeadReckoningAlgorithm;
  }

  public RelativePositionStruct getRelativeSpotLocation() {
    return this.RelativeSpotLocation;
  }

  public void setRelativeSpotLocation(RelativePositionStruct RelativeSpotLocation) {
    this.RelativeSpotLocation = RelativeSpotLocation;
  }

  public AccelerationVectorStruct getSpotLinearAccelerationVector() {
    return this.SpotLinearAccelerationVector;
  }

  public void setSpotLinearAccelerationVector(
      AccelerationVectorStruct SpotLinearAccelerationVector) {
    this.SpotLinearAccelerationVector = SpotLinearAccelerationVector;
  }
}
