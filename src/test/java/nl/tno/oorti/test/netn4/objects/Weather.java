// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.objects;

import nl.tno.oorti.test.netn4.datatypes.HazeStruct;
import nl.tno.oorti.test.netn4.datatypes.LightningTypeEnum8;
import nl.tno.oorti.test.netn4.datatypes.PrecipitationStruct;
import nl.tno.oorti.test.netn4.datatypes.WindStruct;

/**
 * The `Weather` object class represents typical weather-related attributes such as temperature,
 * wind and precipitation but also details regarding barometric pressure, humidity, visual range and
 * haze conditions.
 */
public class Weather extends METOC_EnvironmentCondition {

  /**
   * Optional. The distance at which the human eye in the region/location can discern an object or
   * light. Use the minimum distance if overlapping regions/locations exist.
   */
  Float VisibilityRange;

  /**
   * Optional. The temperature in the region/location at the specified reference altitude.
   * Temperature for specific altitudes is calculated using the International Standard Atmosphere
   * (ISA) model. Default = 0.
   */
  Float Temperature;

  /** Optional: The altitude/depth at which pressure and temperature values are calculated. */
  Double ReferenceAltitude;

  /**
   * Optional. The barometric pressure in millibar or hectopascal (1 mbar = 1hPa) in the
   * region/location at the specified reference altitude. Barometric pressure for specific altitudes
   * are calculated using the International Standard Atmosphere (ISA) model. Default is 1013.25 hPa
   * (standard pressure at sea level).
   */
  Float BarometricPressure;

  /**
   * Optional. Wind speed and direction in the region/location. Use the average wind speed if
   * overlapping weather regions/locations exist.
   */
  WindStruct Wind;

  /**
   * Optional. Current precipitation type and intensity in the region/location. The default is No
   * Precipitation. Use the average intensity of overlapping weather regions/locations. Resolve
   * conflicting precipitation types according to the following precedence: Snow, Hail, Rain, and No
   * Precipitation. E.g. If there is one overlapping environment condition with Snow, the result is
   * always Snow.
   */
  PrecipitationStruct Precipitation;

  /**
   * Optional. Current Haze-type and density in the region/location specified by the Environment
   * Condition. The default is No Haze. Use the average density for overlapping regions/locations
   * with the same haze type.
   */
  HazeStruct Haze;

  /**
   * Optional. The humidity in the region/location. The default is 75% (Normal value). Use the
   * average humidity if overlapping regions/locations exist.
   */
  Float Humidity;

  /** Optional: Level of lightning present. Default 0 = No lightning. */
  LightningTypeEnum8 LightningType;

  /** Optional: The intesity of lightning. Default = 0. */
  Float LightningIntensity;

  public Float getVisibilityRange() {
    return this.VisibilityRange;
  }

  public void setVisibilityRange(Float VisibilityRange) {
    this.VisibilityRange = VisibilityRange;
  }

  public Float getTemperature() {
    return this.Temperature;
  }

  public void setTemperature(Float Temperature) {
    this.Temperature = Temperature;
  }

  public Double getReferenceAltitude() {
    return this.ReferenceAltitude;
  }

  public void setReferenceAltitude(Double ReferenceAltitude) {
    this.ReferenceAltitude = ReferenceAltitude;
  }

  public Float getBarometricPressure() {
    return this.BarometricPressure;
  }

  public void setBarometricPressure(Float BarometricPressure) {
    this.BarometricPressure = BarometricPressure;
  }

  public WindStruct getWind() {
    return this.Wind;
  }

  public void setWind(WindStruct Wind) {
    this.Wind = Wind;
  }

  public PrecipitationStruct getPrecipitation() {
    return this.Precipitation;
  }

  public void setPrecipitation(PrecipitationStruct Precipitation) {
    this.Precipitation = Precipitation;
  }

  public HazeStruct getHaze() {
    return this.Haze;
  }

  public void setHaze(HazeStruct Haze) {
    this.Haze = Haze;
  }

  public Float getHumidity() {
    return this.Humidity;
  }

  public void setHumidity(Float Humidity) {
    this.Humidity = Humidity;
  }

  public LightningTypeEnum8 getLightningType() {
    return this.LightningType;
  }

  public void setLightningType(LightningTypeEnum8 LightningType) {
    this.LightningType = LightningType;
  }

  public Float getLightningIntensity() {
    return this.LightningIntensity;
  }

  public void setLightningIntensity(Float LightningIntensity) {
    this.LightningIntensity = LightningIntensity;
  }
}
