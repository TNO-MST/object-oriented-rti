// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.datatypes;

/** Variant Record for a single spatial attribute. */
public class SpatialVariantStruct {

  /** Discriminant */
  DeadReckoningAlgorithmEnum8 DeadReckoningAlgorithm;

  /** Variant for representing a static object. */
  SpatialStaticStruct SpatialStatic;

  /**
   * Variant for representing an object with a constant velocity (or low acceleration) linear motion
   * in world coordinates.
   */
  SpatialFPStruct SpatialFPW;

  /**
   * Variant for representing an object with a constant velocity (or low acceleration) linear
   * motion, including rotation information, in world coordinates.
   */
  SpatialRPStruct SpatialRPW;

  /**
   * Variant for representing an object with high speed or maneuvering at any speed, including
   * rotation information, in world coordinates.
   */
  SpatialRVStruct SpatialRVW;

  /**
   * Variant for representing an object with high speed or maneuvering at any speed in world
   * coordinates.
   */
  SpatialFVStruct SpatialFVW;

  /**
   * Variant for representing an object with a constant velocity (or low acceleration) linear motion
   * in body axis coordinates.
   */
  SpatialFPStruct SpatialFPB;

  /**
   * Variant for representing an object with a constant velocity (or low acceleration) linear
   * motion, including rotation information, in body axis coordinates.
   */
  SpatialRPStruct SpatialRPB;

  /**
   * Variant for representing an object with high speed or maneuvering at any speed, including
   * rotation information, in body axis coordinates.
   */
  SpatialRVStruct SpatialRVB;

  /**
   * Variant for representing an object with high speed or maneuvering at any speed in body axis
   * coordinates.
   */
  SpatialFVStruct SpatialFVB;

  public DeadReckoningAlgorithmEnum8 getDeadReckoningAlgorithm() {
    return this.DeadReckoningAlgorithm;
  }

  public void setDeadReckoningAlgorithm(DeadReckoningAlgorithmEnum8 DeadReckoningAlgorithm) {
    this.DeadReckoningAlgorithm = DeadReckoningAlgorithm;
  }

  public SpatialStaticStruct getSpatialStatic() {
    return this.SpatialStatic;
  }

  public void setSpatialStatic(SpatialStaticStruct SpatialStatic) {
    this.SpatialStatic = SpatialStatic;
  }

  public SpatialFPStruct getSpatialFPW() {
    return this.SpatialFPW;
  }

  public void setSpatialFPW(SpatialFPStruct SpatialFPW) {
    this.SpatialFPW = SpatialFPW;
  }

  public SpatialRPStruct getSpatialRPW() {
    return this.SpatialRPW;
  }

  public void setSpatialRPW(SpatialRPStruct SpatialRPW) {
    this.SpatialRPW = SpatialRPW;
  }

  public SpatialRVStruct getSpatialRVW() {
    return this.SpatialRVW;
  }

  public void setSpatialRVW(SpatialRVStruct SpatialRVW) {
    this.SpatialRVW = SpatialRVW;
  }

  public SpatialFVStruct getSpatialFVW() {
    return this.SpatialFVW;
  }

  public void setSpatialFVW(SpatialFVStruct SpatialFVW) {
    this.SpatialFVW = SpatialFVW;
  }

  public SpatialFPStruct getSpatialFPB() {
    return this.SpatialFPB;
  }

  public void setSpatialFPB(SpatialFPStruct SpatialFPB) {
    this.SpatialFPB = SpatialFPB;
  }

  public SpatialRPStruct getSpatialRPB() {
    return this.SpatialRPB;
  }

  public void setSpatialRPB(SpatialRPStruct SpatialRPB) {
    this.SpatialRPB = SpatialRPB;
  }

  public SpatialRVStruct getSpatialRVB() {
    return this.SpatialRVB;
  }

  public void setSpatialRVB(SpatialRVStruct SpatialRVB) {
    this.SpatialRVB = SpatialRVB;
  }

  public SpatialFVStruct getSpatialFVB() {
    return this.SpatialFVB;
  }

  public void setSpatialFVB(SpatialFVStruct SpatialFVB) {
    this.SpatialFVB = SpatialFVB;
  }
}
