// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.objects;

import nl.tno.oorti.test.netn4.datatypes.AntiCollisionLightFlashingEnum8;
import nl.tno.oorti.test.netn4.datatypes.AppearanceAntiCollisionDayNightEnum8;
import nl.tno.oorti.test.netn4.datatypes.AppearanceNVGModeEnum8;
import nl.tno.oorti.test.netn4.datatypes.NavigationLightFlashingEnum8;
import nl.tno.oorti.test.netn4.datatypes.RPRboolean;

/**
 * A platform entity that operates mainly in the air, such as aircraft, balloons, etc. This includes
 * the entities when they are on the ground.
 */
public class Aircraft extends Platform {

  /** Optional: Describes the day/night status of the Anti-Collision lights. Default Day=0. */
  AppearanceAntiCollisionDayNightEnum8 AntiCollisionLightsDayNight;

  /** Optional: Anti collision light flashing state. Default Steady=0. */
  AntiCollisionLightFlashingEnum8 AntiCollisionLightsFlashing;

  /** Optional: Formation lights luminance level. Default = 0. */
  Byte FormationLightsLuminance;

  /** Optional: Navigation lights flashing state. Default Steady=0. */
  NavigationLightFlashingEnum8 NavigationLightsFlashing;

  /**
   * Optional: Describes whether air platform lighting is in covert or overt mode. Default
   * Overt_Lighting = 0.
   */
  AppearanceNVGModeEnum8 NVGMode;

  /** Optional: Whether the entity's taxiway lights are on or not. Default False=0. */
  RPRboolean TaxiwayLightsOn;

  /**
   * Optional. Whether the HDU Lights are on or not. Hose Drogue Unit (HDU) Lights are used during
   * air-to-air refueling. Default False = 0.
   */
  RPRboolean HDULightsOn;

  /** Optional: The indicated air speed of the aircraft. Default 2.6 m/s */
  Float IndicatedAirspeed;

  /** Optional: The true air speed of the aircraft. Default = 2.6 m/s */
  Float TrueAirspeed;

  /** Optional: The speed of the aircraft measured in Mach number. Default = 0.1 */
  Float MachNumber;

  /**
   * Optional: Describes whether the air platform has weight on its main landing gear. Default True
   * = 1.
   */
  RPRboolean WeightOnWheels;

  public AppearanceAntiCollisionDayNightEnum8 getAntiCollisionLightsDayNight() {
    return this.AntiCollisionLightsDayNight;
  }

  public void setAntiCollisionLightsDayNight(
      AppearanceAntiCollisionDayNightEnum8 AntiCollisionLightsDayNight) {
    this.AntiCollisionLightsDayNight = AntiCollisionLightsDayNight;
  }

  public AntiCollisionLightFlashingEnum8 getAntiCollisionLightsFlashing() {
    return this.AntiCollisionLightsFlashing;
  }

  public void setAntiCollisionLightsFlashing(
      AntiCollisionLightFlashingEnum8 AntiCollisionLightsFlashing) {
    this.AntiCollisionLightsFlashing = AntiCollisionLightsFlashing;
  }

  public Byte getFormationLightsLuminance() {
    return this.FormationLightsLuminance;
  }

  public void setFormationLightsLuminance(Byte FormationLightsLuminance) {
    this.FormationLightsLuminance = FormationLightsLuminance;
  }

  public NavigationLightFlashingEnum8 getNavigationLightsFlashing() {
    return this.NavigationLightsFlashing;
  }

  public void setNavigationLightsFlashing(NavigationLightFlashingEnum8 NavigationLightsFlashing) {
    this.NavigationLightsFlashing = NavigationLightsFlashing;
  }

  public AppearanceNVGModeEnum8 getNVGMode() {
    return this.NVGMode;
  }

  public void setNVGMode(AppearanceNVGModeEnum8 NVGMode) {
    this.NVGMode = NVGMode;
  }

  public RPRboolean getTaxiwayLightsOn() {
    return this.TaxiwayLightsOn;
  }

  public void setTaxiwayLightsOn(RPRboolean TaxiwayLightsOn) {
    this.TaxiwayLightsOn = TaxiwayLightsOn;
  }

  public RPRboolean getHDULightsOn() {
    return this.HDULightsOn;
  }

  public void setHDULightsOn(RPRboolean HDULightsOn) {
    this.HDULightsOn = HDULightsOn;
  }

  public Float getIndicatedAirspeed() {
    return this.IndicatedAirspeed;
  }

  public void setIndicatedAirspeed(Float IndicatedAirspeed) {
    this.IndicatedAirspeed = IndicatedAirspeed;
  }

  public Float getTrueAirspeed() {
    return this.TrueAirspeed;
  }

  public void setTrueAirspeed(Float TrueAirspeed) {
    this.TrueAirspeed = TrueAirspeed;
  }

  public Float getMachNumber() {
    return this.MachNumber;
  }

  public void setMachNumber(Float MachNumber) {
    this.MachNumber = MachNumber;
  }

  public RPRboolean getWeightOnWheels() {
    return this.WeightOnWheels;
  }

  public void setWeightOnWheels(RPRboolean WeightOnWheels) {
    this.WeightOnWheels = WeightOnWheels;
  }
}
