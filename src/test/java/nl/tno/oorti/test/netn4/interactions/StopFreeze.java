// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.interactions;

import nl.tno.oorti.test.mim4.interactions.HLAinteractionRoot;
import nl.tno.oorti.test.netn4.datatypes.ClockTimeStruct;
import nl.tno.oorti.test.netn4.datatypes.EntityIdentifierStruct;
import nl.tno.oorti.test.netn4.datatypes.RPRboolean;
import nl.tno.oorti.test.netn4.datatypes.StopFreezeReasonEnum8;

/**
 * A Simulation Management (SIMAN) interaction, sent from a Simulation Manager federate to request
 * that one or more entities either a) freeze (pause) their simulation or b) stop their simulation.
 */
public class StopFreeze extends HLAinteractionRoot {

  /** The DIS entity ID of the entity or application sending the interaction. */
  EntityIdentifierStruct OriginatingEntity;

  /**
   * The DIS entity ID of the entity or application which is the intended recipient(s) of the
   * interaction.
   */
  EntityIdentifierStruct ReceivingEntity;

  /**
   * The Request ID is a monotonically increasing integer identifier inserted by the Simulation
   * Manager into all Simulation management interactions. It is used as a unique identifier to
   * identify the latest in a series of competing requests and identifying acknowledgements.
   */
  Integer RequestIdentifier;

  /** The real world time (GMT) that the entity or entities should stop/freeze at. */
  ClockTimeStruct RealWorldTime;

  /** The reason for the stop or freeze. */
  StopFreezeReasonEnum8 Reason;

  /**
   * Whether the entity or entities being stopped/frozen should continue to reflect values when
   * stopped/frozen.
   */
  RPRboolean ReflectValues;

  /**
   * Whether the entity or entities being stopped/frozen should continue to run their internal
   * simulation clock when stopped/frozen.
   */
  RPRboolean RunInternalSimulationClock;

  /**
   * Whether the entity or entities being stopped/frozen should continue to update attributes when
   * stopped/frozen.
   */
  RPRboolean UpdateAttributes;

  public EntityIdentifierStruct getOriginatingEntity() {
    return this.OriginatingEntity;
  }

  public void setOriginatingEntity(EntityIdentifierStruct OriginatingEntity) {
    this.OriginatingEntity = OriginatingEntity;
  }

  public EntityIdentifierStruct getReceivingEntity() {
    return this.ReceivingEntity;
  }

  public void setReceivingEntity(EntityIdentifierStruct ReceivingEntity) {
    this.ReceivingEntity = ReceivingEntity;
  }

  public Integer getRequestIdentifier() {
    return this.RequestIdentifier;
  }

  public void setRequestIdentifier(Integer RequestIdentifier) {
    this.RequestIdentifier = RequestIdentifier;
  }

  public ClockTimeStruct getRealWorldTime() {
    return this.RealWorldTime;
  }

  public void setRealWorldTime(ClockTimeStruct RealWorldTime) {
    this.RealWorldTime = RealWorldTime;
  }

  public StopFreezeReasonEnum8 getReason() {
    return this.Reason;
  }

  public void setReason(StopFreezeReasonEnum8 Reason) {
    this.Reason = Reason;
  }

  public RPRboolean getReflectValues() {
    return this.ReflectValues;
  }

  public void setReflectValues(RPRboolean ReflectValues) {
    this.ReflectValues = ReflectValues;
  }

  public RPRboolean getRunInternalSimulationClock() {
    return this.RunInternalSimulationClock;
  }

  public void setRunInternalSimulationClock(RPRboolean RunInternalSimulationClock) {
    this.RunInternalSimulationClock = RunInternalSimulationClock;
  }

  public RPRboolean getUpdateAttributes() {
    return this.UpdateAttributes;
  }

  public void setUpdateAttributes(RPRboolean UpdateAttributes) {
    this.UpdateAttributes = UpdateAttributes;
  }
}
