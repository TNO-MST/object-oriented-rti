// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.objects;

import java.util.UUID;
import nl.tno.oorti.test.netn4.datatypes.LocationStruct;
import nl.tno.oorti.test.netn4.datatypes.NetworkDeviceStruct;
import nl.tno.oorti.test.netn4.datatypes.RequestedConnection;

/**
 * A `CommunicationNode` is the representation of the interface of a simulated entity to logical
 * communication networks. The location of the `CommunicationNode` is derived from the referenced
 * entity or specified explicitly (if the referenced entity is not registered in the federation).
 *
 * <p>Each potential connection is described in terms of requested connections (the equivalent to
 * the information provided by MSDL). `Connection` objects represent the availability of a
 * connection and its receivers. It is up to a communication simulation to create `Connection`
 * objects for the requested connections based on the network devices of the `CommunicationNode`,
 * the physical network and the link quality between network devices. Depending on the federation
 * design and agreements, the explicit representation of the physical layer objects,
 * `PhysicalNetwork` and `LinkStates`, is optional.
 *
 * <p>A requested connection is used to describe the characteristics of a possible connection to a
 * communication network. For the types of connections where data is intended to be transmitted, a
 * connection identifier can be provided that can be used to create a `Connection` object instance.
 *
 * <p>Unless a network device is explicitly specified, all suitable devices associated with the
 * communication network of the requested connection shall be used.
 *
 * <p>Depending on the type of the requested connection the use of the associated network device
 * parameters differs:
 *
 * <p>**Broadcast Transceiver**: A combination of Broadcast Transmitter and Receiver **Broadcast
 * Transmitter**: If TX is specified for a network device, connections are established to all
 * receiving entities reachable depending on the physical network description (ranges, max hops,
 * etc.). Data is sent to all (directly linked) receivers simultaneously. A Connection instance
 * should be created. The DestinationEntityArray is ignored. **Broadcast Receiver**: If RX is
 * specified for a network device, the connections listen to all incoming messages. The
 * DestinationEntityArray is ignored. **Peer-To-Peer**: If TX is specified for a network device
 * connections are established to all reachable specified destination entities. If RX is specified
 * for a network device, the connections listen to all incoming messages which are sent to the
 * entity. It is assumed that the communication is bidirectional and should use the same route in
 * both directions. The connection must be defined at the receiver as well. If
 * DestinationEntityArray is empty messages will be sent to all reachable participants of the
 * communication network. It is strongly recommended to define a limited set of destinations
 * wherever possible. It is assumed that messages are transmitted sequentially to all receivers
 * defined as a destination. (Be aware: this does not include intercepting devices) Any max. hop
 * count / TTL parameter of the physical network is ignored. **Unidirectional**: Like Peer-To-Peer
 * but no connection back to the source with the same route is expected. **Multicast**: The
 * connection logic is similar to unidirectional connections. Data is sent to all receivers
 * simultaneously. The DestinationEntityArray is ignored. **Intercepting connections**: These are
 * special connections not related to specific destination entities but intercept all types of
 * connections that are reachable by the corresponding device. In the case of broadcasts, this
 * corresponds to a broadcast receiver, otherwise, this means the connection is routed through the
 * corresponding device. The DestinationEntityArray is ignored.
 */
public class CommunicationNode extends COM_Root {

  /**
   * Optional. Reference to a simulation entity. If the referenced entity exists in the federation,
   * the location of the node is derived from the location of the entity. If the referenced entity
   * does not exist in the federation, the location of the node is defined by the Location
   * attribute.
   */
  UUID HostEntity;

  /**
   * Optional. Specifies the location of the `CommunicationNode` in case the entity referenced by
   * `HostEntity` is not registered in the federation. If the referenced entity exists in the
   * federation, the location of the communication node is derived from that entity and the value of
   * the Location attribute shall be ignored.
   */
  LocationStruct Location;

  /** Required. Possible (requested) connections for the communication node. */
  RequestedConnection[] RequestedConnections;

  /**
   * Required. Available network devices define the association of a communication network
   * (connection layer) with a physical network (link layer). Each network device can be associated
   * with several communication networks but only one physical network. Each network device also
   * describes the transmitter and receiver capabilities.
   */
  NetworkDeviceStruct[] NetworkDevices;

  public UUID getHostEntity() {
    return this.HostEntity;
  }

  public void setHostEntity(UUID HostEntity) {
    this.HostEntity = HostEntity;
  }

  public LocationStruct getLocation() {
    return this.Location;
  }

  public void setLocation(LocationStruct Location) {
    this.Location = Location;
  }

  public RequestedConnection[] getRequestedConnections() {
    return this.RequestedConnections;
  }

  public void setRequestedConnections(RequestedConnection[] RequestedConnections) {
    this.RequestedConnections = RequestedConnections;
  }

  public NetworkDeviceStruct[] getNetworkDevices() {
    return this.NetworkDevices;
  }

  public void setNetworkDevices(NetworkDeviceStruct[] NetworkDevices) {
    this.NetworkDevices = NetworkDevices;
  }
}
