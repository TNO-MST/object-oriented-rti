// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.objects;

import nl.tno.oorti.test.netn4.datatypes.RPRboolean;

/** A platform entity that operates wholly on the surface of the sea. */
public class SurfaceVessel extends Platform {

  /** Optional: Whether the entitys anchor lights are on or not. Default Off = False. */
  RPRboolean AnchorLightsOn;

  /** Optional: Whether the entitys warning/safety lights are on or not. Default Off = False. */
  RPRboolean WarningLightsOn;

  /** Optional: Whether the entitys distress beacon is on or not. Default Off = False. */
  RPRboolean DistressBeaconOn;

  /**
   * Optional: Indicates the intensity level of the Flight Deck Lights. A value of 0 means the light
   * is off, while a value of 100 means the light is on at full power. Default = 0.
   */
  Byte FlightDeckLights;

  /** Optional: Whether the entitys upper deck flood lights are on or not. Default Off = False. */
  RPRboolean UpperDeckFloodLightsOn;

  /** Optional: Whether the entitys upper deck lights are on or not. Default Off = False. */
  RPRboolean UpperDeckLightsOn;

  /**
   * Optional: Indicates the intensity level of the Horizon Bar Lights. A value of 0 means the light
   * is off, while a value of 100 means the light is on at full power. Default = 0.
   */
  Byte HorizonBarLights;

  /**
   * Optional: Indicates the intensity level of the GlidePathIndicatorBeam. A value of 0 means the
   * light is off, while a value of 100 means the light is on at full power. Default = 0.
   */
  Byte GlidePathIndicatorBeam;

  /** Optional: Whether the entitys wave off light is on or not. Default Off = False. */
  RPRboolean WaveOffLightOn;

  /** Optional: Whether the entitys Not Under Command lights are on or not. Default Off = False. */
  RPRboolean NotUnderCommandLightsOn;

  /**
   * Optional: Whether the entitys Restricted Ability To Manuever (RAM) lights are on or not.
   * Default Off = False.
   */
  RPRboolean RAMLightsOn;

  /** Optional: Whether the entitys fishing lights with lines are on or not. Default Off = False. */
  RPRboolean FishingWithLinesLightsOn;

  /** Optional: Whether the entitys fishing lights with nets are on or not. Default Off = False. */
  RPRboolean FishingWithNetsLightsOn;

  /** Optional: Whether the entitys mine hunting lights are on or not. Default Off = False. */
  RPRboolean MineHuntingLightsOn;

  public RPRboolean getAnchorLightsOn() {
    return this.AnchorLightsOn;
  }

  public void setAnchorLightsOn(RPRboolean AnchorLightsOn) {
    this.AnchorLightsOn = AnchorLightsOn;
  }

  public RPRboolean getWarningLightsOn() {
    return this.WarningLightsOn;
  }

  public void setWarningLightsOn(RPRboolean WarningLightsOn) {
    this.WarningLightsOn = WarningLightsOn;
  }

  public RPRboolean getDistressBeaconOn() {
    return this.DistressBeaconOn;
  }

  public void setDistressBeaconOn(RPRboolean DistressBeaconOn) {
    this.DistressBeaconOn = DistressBeaconOn;
  }

  public Byte getFlightDeckLights() {
    return this.FlightDeckLights;
  }

  public void setFlightDeckLights(Byte FlightDeckLights) {
    this.FlightDeckLights = FlightDeckLights;
  }

  public RPRboolean getUpperDeckFloodLightsOn() {
    return this.UpperDeckFloodLightsOn;
  }

  public void setUpperDeckFloodLightsOn(RPRboolean UpperDeckFloodLightsOn) {
    this.UpperDeckFloodLightsOn = UpperDeckFloodLightsOn;
  }

  public RPRboolean getUpperDeckLightsOn() {
    return this.UpperDeckLightsOn;
  }

  public void setUpperDeckLightsOn(RPRboolean UpperDeckLightsOn) {
    this.UpperDeckLightsOn = UpperDeckLightsOn;
  }

  public Byte getHorizonBarLights() {
    return this.HorizonBarLights;
  }

  public void setHorizonBarLights(Byte HorizonBarLights) {
    this.HorizonBarLights = HorizonBarLights;
  }

  public Byte getGlidePathIndicatorBeam() {
    return this.GlidePathIndicatorBeam;
  }

  public void setGlidePathIndicatorBeam(Byte GlidePathIndicatorBeam) {
    this.GlidePathIndicatorBeam = GlidePathIndicatorBeam;
  }

  public RPRboolean getWaveOffLightOn() {
    return this.WaveOffLightOn;
  }

  public void setWaveOffLightOn(RPRboolean WaveOffLightOn) {
    this.WaveOffLightOn = WaveOffLightOn;
  }

  public RPRboolean getNotUnderCommandLightsOn() {
    return this.NotUnderCommandLightsOn;
  }

  public void setNotUnderCommandLightsOn(RPRboolean NotUnderCommandLightsOn) {
    this.NotUnderCommandLightsOn = NotUnderCommandLightsOn;
  }

  public RPRboolean getRAMLightsOn() {
    return this.RAMLightsOn;
  }

  public void setRAMLightsOn(RPRboolean RAMLightsOn) {
    this.RAMLightsOn = RAMLightsOn;
  }

  public RPRboolean getFishingWithLinesLightsOn() {
    return this.FishingWithLinesLightsOn;
  }

  public void setFishingWithLinesLightsOn(RPRboolean FishingWithLinesLightsOn) {
    this.FishingWithLinesLightsOn = FishingWithLinesLightsOn;
  }

  public RPRboolean getFishingWithNetsLightsOn() {
    return this.FishingWithNetsLightsOn;
  }

  public void setFishingWithNetsLightsOn(RPRboolean FishingWithNetsLightsOn) {
    this.FishingWithNetsLightsOn = FishingWithNetsLightsOn;
  }

  public RPRboolean getMineHuntingLightsOn() {
    return this.MineHuntingLightsOn;
  }

  public void setMineHuntingLightsOn(RPRboolean MineHuntingLightsOn) {
    this.MineHuntingLightsOn = MineHuntingLightsOn;
  }
}
