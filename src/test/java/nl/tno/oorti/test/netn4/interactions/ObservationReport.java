// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.interactions;

import java.util.UUID;
import nl.tno.oorti.test.netn4.datatypes.AggregateMissionEnum16;
import nl.tno.oorti.test.netn4.datatypes.EntityTypeStruct;
import nl.tno.oorti.test.netn4.datatypes.HostilityStatusCodeEnum32;
import nl.tno.oorti.test.netn4.datatypes.IdentificationLevelEnum8;
import nl.tno.oorti.test.netn4.datatypes.LocationStruct;
import nl.tno.oorti.test.netn4.datatypes.ObservedEquipment;

/**
 * Report on a unit's observation of a simulated entity. Based on SISO C2SIM standard ontology for
 * representation of Observation Reports.
 */
public class ObservationReport extends ETR_Report {

  /** Required: The unique identifier of the observed entity */
  UUID ObservedEntity;

  /** Required: The time when the observation was made. */
  Integer ObservationTime;

  /** Optional. The identification level of spotted entities. */
  IdentificationLevelEnum8 IdentificationLevel;

  /** Optional: */
  Double ConfidenceLevel;

  /** Optional: The type of sensor that is the primary source of the report. */
  EntityTypeStruct SensorType;

  /** Optional */
  Double UncertaintyInterval;

  /** Optional: The current activity of the entity. (Fromm NETN-Base) Default value: Moving (213) */
  AggregateMissionEnum16 Activity;

  /**
   * Optional: Observed strength of an entity expressed as a percentage of the perceived normal
   * strength.
   */
  Float Health;

  /** Optional: Observed location where the entity were spotted */
  LocationStruct Location;

  /** Optional: Observed heading of spotted entity. */
  Float Heading;

  /** Optional: Observed speed of the entity (m/s). */
  Float Speed;

  /** Optional: Perceived hostility of the observed entity. */
  HostilityStatusCodeEnum32 HostilityStatus;

  /** Optional: Observed marking on the entity. */
  String Marking;

  /** Optional: Perceived name of the observed entity. */
  String Name;

  /** Optional: Perceived force identifier of the observed entity. */
  UUID Side;

  /** Optional: Observed supplies and equipment. */
  ObservedEquipment[] Equipment;

  /** Optional: Symbol identifier for the entity. */
  String Symbol;

  public UUID getObservedEntity() {
    return this.ObservedEntity;
  }

  public void setObservedEntity(UUID ObservedEntity) {
    this.ObservedEntity = ObservedEntity;
  }

  public Integer getObservationTime() {
    return this.ObservationTime;
  }

  public void setObservationTime(Integer ObservationTime) {
    this.ObservationTime = ObservationTime;
  }

  public IdentificationLevelEnum8 getIdentificationLevel() {
    return this.IdentificationLevel;
  }

  public void setIdentificationLevel(IdentificationLevelEnum8 IdentificationLevel) {
    this.IdentificationLevel = IdentificationLevel;
  }

  public Double getConfidenceLevel() {
    return this.ConfidenceLevel;
  }

  public void setConfidenceLevel(Double ConfidenceLevel) {
    this.ConfidenceLevel = ConfidenceLevel;
  }

  public EntityTypeStruct getSensorType() {
    return this.SensorType;
  }

  public void setSensorType(EntityTypeStruct SensorType) {
    this.SensorType = SensorType;
  }

  public Double getUncertaintyInterval() {
    return this.UncertaintyInterval;
  }

  public void setUncertaintyInterval(Double UncertaintyInterval) {
    this.UncertaintyInterval = UncertaintyInterval;
  }

  public AggregateMissionEnum16 getActivity() {
    return this.Activity;
  }

  public void setActivity(AggregateMissionEnum16 Activity) {
    this.Activity = Activity;
  }

  public Float getHealth() {
    return this.Health;
  }

  public void setHealth(Float Health) {
    this.Health = Health;
  }

  public LocationStruct getLocation() {
    return this.Location;
  }

  public void setLocation(LocationStruct Location) {
    this.Location = Location;
  }

  public Float getHeading() {
    return this.Heading;
  }

  public void setHeading(Float Heading) {
    this.Heading = Heading;
  }

  public Float getSpeed() {
    return this.Speed;
  }

  public void setSpeed(Float Speed) {
    this.Speed = Speed;
  }

  public HostilityStatusCodeEnum32 getHostilityStatus() {
    return this.HostilityStatus;
  }

  public void setHostilityStatus(HostilityStatusCodeEnum32 HostilityStatus) {
    this.HostilityStatus = HostilityStatus;
  }

  public String getMarking() {
    return this.Marking;
  }

  public void setMarking(String Marking) {
    this.Marking = Marking;
  }

  public String getName() {
    return this.Name;
  }

  public void setName(String Name) {
    this.Name = Name;
  }

  public UUID getSide() {
    return this.Side;
  }

  public void setSide(UUID Side) {
    this.Side = Side;
  }

  public ObservedEquipment[] getEquipment() {
    return this.Equipment;
  }

  public void setEquipment(ObservedEquipment[] Equipment) {
    this.Equipment = Equipment;
  }

  public String getSymbol() {
    return this.Symbol;
  }

  public void setSymbol(String Symbol) {
    this.Symbol = Symbol;
  }
}
