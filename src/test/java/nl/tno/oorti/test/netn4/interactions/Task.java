// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.interactions;

import java.util.UUID;
import nl.tno.oorti.test.netn4.datatypes.AggregateMissionEnum16;
import nl.tno.oorti.test.netn4.datatypes.TaskModeEnum8;

/**
 * Requests a simulated entity to perform some task based on a task description. If accepted, the
 * federate application modelling the behaviour will execute the task per task parameters and
 * scheduling. A request task is acknowledged using a `TaskStatusUpdate` response interaction.
 * Resending a `RequestTask` with the same `TaskId` as a previously sent interaction is equivalent
 * to cancelling and sending a new task.
 */
public class Task extends SMC_EntityControl {

  /**
   * Optional. Reference to communication networks (NETN-COM) used to transfer tasking messages. If
   * not provided, the task transmission should not be modelled and federates should receive and act
   * on the task messages directly.
   */
  UUID[][] CommunicationNetworks;

  /** Required. Unique identifier for the task. */
  UUID TaskId;

  /** Optional. The default value is the current `SendTime`. */
  Integer StartTime;

  /**
   * Optional. Specifies the activity for the entity that will execute the task. The default value
   * is zero (0).
   */
  AggregateMissionEnum16 Activity;

  /**
   * Optional. A general text describing information about this task. The annotation may, e.g.
   * include the reason for the task and text describing the names of referenced entities.
   */
  String Annotation;

  /** Optional. Provided to indicate that this task is a subtask related to a main task. */
  UUID MainTask;

  /** Optional. Provided to indicate that the task will execute after the referenced task. */
  UUID PreviousTask;

  /** Optional. Provided to indicate that the task will execute before the referenced task. */
  UUID NextTask;

  /** Optional. Reference to the commander of the task. If missing, the commander is undefined. */
  UUID Tasker;

  /** Optional. Determines the task mode. Default NonConcurrentMode */
  TaskModeEnum8 TaskMode;

  public UUID[][] getCommunicationNetworks() {
    return this.CommunicationNetworks;
  }

  public void setCommunicationNetworks(UUID[][] CommunicationNetworks) {
    this.CommunicationNetworks = CommunicationNetworks;
  }

  public UUID getTaskId() {
    return this.TaskId;
  }

  public void setTaskId(UUID TaskId) {
    this.TaskId = TaskId;
  }

  public Integer getStartTime() {
    return this.StartTime;
  }

  public void setStartTime(Integer StartTime) {
    this.StartTime = StartTime;
  }

  public AggregateMissionEnum16 getActivity() {
    return this.Activity;
  }

  public void setActivity(AggregateMissionEnum16 Activity) {
    this.Activity = Activity;
  }

  public String getAnnotation() {
    return this.Annotation;
  }

  public void setAnnotation(String Annotation) {
    this.Annotation = Annotation;
  }

  public UUID getMainTask() {
    return this.MainTask;
  }

  public void setMainTask(UUID MainTask) {
    this.MainTask = MainTask;
  }

  public UUID getPreviousTask() {
    return this.PreviousTask;
  }

  public void setPreviousTask(UUID PreviousTask) {
    this.PreviousTask = PreviousTask;
  }

  public UUID getNextTask() {
    return this.NextTask;
  }

  public void setNextTask(UUID NextTask) {
    this.NextTask = NextTask;
  }

  public UUID getTasker() {
    return this.Tasker;
  }

  public void setTasker(UUID Tasker) {
    this.Tasker = Tasker;
  }

  public TaskModeEnum8 getTaskMode() {
    return this.TaskMode;
  }

  public void setTaskMode(TaskModeEnum8 TaskMode) {
    this.TaskMode = TaskMode;
  }
}
