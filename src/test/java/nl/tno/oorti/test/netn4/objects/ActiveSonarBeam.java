// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.objects;

import nl.tno.oorti.test.mim4.objects.HLAobjectRoot;
import nl.tno.oorti.test.netn4.datatypes.ActiveSonarScanPatternEnum16;
import nl.tno.oorti.test.netn4.datatypes.EventIdentifierStruct;

/** A sector of concentrated acoustic energy from an active sonar device. */
public class ActiveSonarBeam extends HLAobjectRoot {

  /** An index into the database of active (intentional) underwater acoustics emissions. */
  Short ActiveEmissionParameterIndex;

  /** The RTI ID of the ActiveSonar emitting this beam */
  String ActiveSonarIdentifier;

  /**
   * The horizontal width of the main beam (as opposed to any side lobes) measured from beam center
   * to the 3 dB down point. Omni directional beams shall have a beam width of 0 radians.
   */
  Float AzimuthBeamwidth;

  /**
   * The center azimuthal bearing of the main beam (as opposed to side lobes) in relation to the own
   * ship heading, clockwise positive. Omnidirection beams shall have an azimuthal center of 0
   * radians.
   */
  Float AzimuthCenter;

  /**
   * The identification of the active sonar beam, which must be unique on the active sonar system.
   */
  Byte BeamIdentifier;

  /** Vertical angle from beam center to 3db down point. O is omnidirectional */
  Float ElevationBeamwidth;

  /** The angle of axis of the beam center to the horizontal plane. Positive upward. */
  Float ElevationCenter;

  /** Used to associate changes to the beam with its ActiveSonar. */
  EventIdentifierStruct EventIdentifier;

  /** The pattern that describes the angular movement of the sonar beam during its sweep. */
  ActiveSonarScanPatternEnum16 ScanPattern;

  public Short getActiveEmissionParameterIndex() {
    return this.ActiveEmissionParameterIndex;
  }

  public void setActiveEmissionParameterIndex(Short ActiveEmissionParameterIndex) {
    this.ActiveEmissionParameterIndex = ActiveEmissionParameterIndex;
  }

  public String getActiveSonarIdentifier() {
    return this.ActiveSonarIdentifier;
  }

  public void setActiveSonarIdentifier(String ActiveSonarIdentifier) {
    this.ActiveSonarIdentifier = ActiveSonarIdentifier;
  }

  public Float getAzimuthBeamwidth() {
    return this.AzimuthBeamwidth;
  }

  public void setAzimuthBeamwidth(Float AzimuthBeamwidth) {
    this.AzimuthBeamwidth = AzimuthBeamwidth;
  }

  public Float getAzimuthCenter() {
    return this.AzimuthCenter;
  }

  public void setAzimuthCenter(Float AzimuthCenter) {
    this.AzimuthCenter = AzimuthCenter;
  }

  public Byte getBeamIdentifier() {
    return this.BeamIdentifier;
  }

  public void setBeamIdentifier(Byte BeamIdentifier) {
    this.BeamIdentifier = BeamIdentifier;
  }

  public Float getElevationBeamwidth() {
    return this.ElevationBeamwidth;
  }

  public void setElevationBeamwidth(Float ElevationBeamwidth) {
    this.ElevationBeamwidth = ElevationBeamwidth;
  }

  public Float getElevationCenter() {
    return this.ElevationCenter;
  }

  public void setElevationCenter(Float ElevationCenter) {
    this.ElevationCenter = ElevationCenter;
  }

  public EventIdentifierStruct getEventIdentifier() {
    return this.EventIdentifier;
  }

  public void setEventIdentifier(EventIdentifierStruct EventIdentifier) {
    this.EventIdentifier = EventIdentifier;
  }

  public ActiveSonarScanPatternEnum16 getScanPattern() {
    return this.ScanPattern;
  }

  public void setScanPattern(ActiveSonarScanPatternEnum16 ScanPattern) {
    this.ScanPattern = ScanPattern;
  }
}
