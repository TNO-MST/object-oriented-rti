// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.objects;

import nl.tno.oorti.test.netn4.datatypes.RoadIceConditionEnum16;
import nl.tno.oorti.test.netn4.datatypes.SnowStruct;
import nl.tno.oorti.test.netn4.datatypes.SurfaceMoistureEnum16;

/**
 * The environmental conditions related to a land surface include inherited attributes such as
 * temperature, wind and precipitation and add additional detail regarding the land surface's snow,
 * moisture, and ice conditions.
 */
public class LandSurface extends Weather {

  /**
   * Optional. Current snow depth and density in the region/location. The default is no snow. Use
   * the average snow depth and density if overlapping regions/locations exist.
   */
  SnowStruct Snow;

  /**
   * Optional. Surface moisture in the region/location. The default is 0 (Dry). Use the highest
   * enumerated value (most moisture) if overlapping regions/locations exist.
   */
  SurfaceMoistureEnum16 Moisture;

  /**
   * Optional. Surface ice condition in the region/location. The default is no ice. Use the highest
   * enumerated value (most severe ice condition) if overlapping regions/locations exist.
   */
  RoadIceConditionEnum16 IceCondition;

  /** Optional: Accumulated amount of rain on land surface. */
  Float RainAccumulation;

  public SnowStruct getSnow() {
    return this.Snow;
  }

  public void setSnow(SnowStruct Snow) {
    this.Snow = Snow;
  }

  public SurfaceMoistureEnum16 getMoisture() {
    return this.Moisture;
  }

  public void setMoisture(SurfaceMoistureEnum16 Moisture) {
    this.Moisture = Moisture;
  }

  public RoadIceConditionEnum16 getIceCondition() {
    return this.IceCondition;
  }

  public void setIceCondition(RoadIceConditionEnum16 IceCondition) {
    this.IceCondition = IceCondition;
  }

  public Float getRainAccumulation() {
    return this.RainAccumulation;
  }

  public void setRainAccumulation(Float RainAccumulation) {
    this.RainAccumulation = RainAccumulation;
  }
}
