// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.objects;

import nl.tno.oorti.test.netn4.datatypes.ForceIdentifierEnum8;
import nl.tno.oorti.test.netn4.datatypes.Relation;

/**
 * An organization have relationships with other organizations. Units belonging to different
 * organizations have the same relationship as the organizations they belong to. However, the
 * relationships between organizations can be asymmetrical, e.g. Side A can be hostile to B while B
 * is neutral to A. Furthermore, the relation may change during a federation execution.
 */
public class Organization extends ORG_Root {

  /**
   * Optional. The relations with other organizations. The federation agreements specify default
   * relationship.
   */
  Relation[] Relationships;

  /**
   * Required: A force identifier indicate a special relationship with an organization in the
   * scenario designated as the default perspective of the scenario. The force identifier applies to
   * all simulated entities representing an organizational element belonging to the organization and
   * is a required attribute for all `PhysicalEntity` and `AggregateEntity` objects in the
   * federation.
   */
  ForceIdentifierEnum8 ForceIdentifier;

  /**
   * Optional: Numerical country code based on ISO 3166-1 numeric. The numeric codes 900 to 999 can
   * be user-assigned in the federation agreement.
   */
  Integer CountryCode;

  public Relation[] getRelationships() {
    return this.Relationships;
  }

  public void setRelationships(Relation[] Relationships) {
    this.Relationships = Relationships;
  }

  public ForceIdentifierEnum8 getForceIdentifier() {
    return this.ForceIdentifier;
  }

  public void setForceIdentifier(ForceIdentifierEnum8 ForceIdentifier) {
    this.ForceIdentifier = ForceIdentifier;
  }

  public Integer getCountryCode() {
    return this.CountryCode;
  }

  public void setCountryCode(Integer CountryCode) {
    this.CountryCode = CountryCode;
  }
}
