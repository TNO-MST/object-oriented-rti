// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.datatypes;

/** Specifies the type of a radio. */
public class RadioTypeStruct {

  /** The kind of the entity described in this struct. */
  byte EntityKind;

  /** The domain in which the radio entity operates. */
  byte Domain;

  /** The country to which the design of the radio entity is attributed. */
  short CountryCode;

  /** The main category that describes the radio entity. */
  byte Category;

  /** The specific modification or individual unit type for a series and/or family of equipment. */
  NomenclatureVersionEnum8 NomenclatureVersion;

  /** The nomenclature for a particular communications device. */
  NomenclatureEnum16 Nomenclature;

  public byte getEntityKind() {
    return this.EntityKind;
  }

  public void setEntityKind(byte EntityKind) {
    this.EntityKind = EntityKind;
  }

  public byte getDomain() {
    return this.Domain;
  }

  public void setDomain(byte Domain) {
    this.Domain = Domain;
  }

  public short getCountryCode() {
    return this.CountryCode;
  }

  public void setCountryCode(short CountryCode) {
    this.CountryCode = CountryCode;
  }

  public byte getCategory() {
    return this.Category;
  }

  public void setCategory(byte Category) {
    this.Category = Category;
  }

  public NomenclatureVersionEnum8 getNomenclatureVersion() {
    return this.NomenclatureVersion;
  }

  public void setNomenclatureVersion(NomenclatureVersionEnum8 NomenclatureVersion) {
    this.NomenclatureVersion = NomenclatureVersion;
  }

  public NomenclatureEnum16 getNomenclature() {
    return this.Nomenclature;
  }

  public void setNomenclature(NomenclatureEnum16 Nomenclature) {
    this.Nomenclature = Nomenclature;
  }
}
