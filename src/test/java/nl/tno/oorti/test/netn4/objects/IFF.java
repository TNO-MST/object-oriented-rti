// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.objects;

import nl.tno.oorti.test.netn4.datatypes.EventIdentifierStruct;
import nl.tno.oorti.test.netn4.datatypes.FundamentalParameterDataStruct;
import nl.tno.oorti.test.netn4.datatypes.IffOperationalParameter1Enum8;
import nl.tno.oorti.test.netn4.datatypes.IffOperationalParameter2Enum8;
import nl.tno.oorti.test.netn4.datatypes.IffSystemModeEnum8;
import nl.tno.oorti.test.netn4.datatypes.IffSystemNameEnum16;
import nl.tno.oorti.test.netn4.datatypes.IffSystemTypeEnum16;
import nl.tno.oorti.test.netn4.datatypes.RPRboolean;

/**
 * Interrogator Friend or Foe (IFF) system, Air Traffic Control Beacon and Transponder system,
 * collision avoidance and navigational aids systems.
 */
public class IFF extends EmbeddedSystem {

  /** The azimuth center of the IFF beam's scan volume relative to the IFF system. */
  Float BeamAzimuthCenter;

  /** The azimuth half-angle of the IFF beam's scan volume relative to the IFF system. */
  Float BeamAzimuthSweep;

  /** The elevation center of the IFF beam's scan volume relative to the IFF system. */
  Float BeamElevationCenter;

  /** The elevation half-angle of the IFF beam's scan volume relative to the IFF system. */
  Float BeamElevationSweep;

  /** The percentage of time a scan is through its pattern from its origin. */
  Float BeamSweepSync;

  /** Used to associate related events. */
  EventIdentifierStruct EventIdentifier;

  /** The fundamental energy radiation characteristics of the IFF/ATC/NAVAIDS system. */
  FundamentalParameterDataStruct[] FundamentalParameterData;

  /**
   * Specifies if level 2 data is available for this IFF system. If level 2 data is available then
   * the BeamAzimuthCenter, BeamAzimuthSweep, BeamElevationCenter, BeamElevationSweep,
   * BeamSweepSync, FundamentalParameterData, SecondaryOperationalDataParameter1, and
   * SecondaryOperationalDataParameter2 attributes shall be generated.
   */
  RPRboolean Layer2DataAvailable;

  /** Additional characteristics of the IFF/ATC/NAVAIDS emitting system. */
  IffOperationalParameter1Enum8 SecondaryOperationalDataParameter1;

  /** Additional characteristics of the IFF/ATC/NAVAIDS emitting system. */
  IffOperationalParameter2Enum8 SecondaryOperationalDataParameter2;

  /** Mode of operation. */
  IffSystemModeEnum8 SystemMode;

  /** Particular named type of the IFF system in use. */
  IffSystemNameEnum16 SystemName;

  /** General type of IFF system in use. */
  IffSystemTypeEnum16 SystemType;

  /** Whether or not the system is on. */
  RPRboolean SystemIsOn;

  /** Whether or not the system is operational. */
  RPRboolean SystemIsOperational;

  public Float getBeamAzimuthCenter() {
    return this.BeamAzimuthCenter;
  }

  public void setBeamAzimuthCenter(Float BeamAzimuthCenter) {
    this.BeamAzimuthCenter = BeamAzimuthCenter;
  }

  public Float getBeamAzimuthSweep() {
    return this.BeamAzimuthSweep;
  }

  public void setBeamAzimuthSweep(Float BeamAzimuthSweep) {
    this.BeamAzimuthSweep = BeamAzimuthSweep;
  }

  public Float getBeamElevationCenter() {
    return this.BeamElevationCenter;
  }

  public void setBeamElevationCenter(Float BeamElevationCenter) {
    this.BeamElevationCenter = BeamElevationCenter;
  }

  public Float getBeamElevationSweep() {
    return this.BeamElevationSweep;
  }

  public void setBeamElevationSweep(Float BeamElevationSweep) {
    this.BeamElevationSweep = BeamElevationSweep;
  }

  public Float getBeamSweepSync() {
    return this.BeamSweepSync;
  }

  public void setBeamSweepSync(Float BeamSweepSync) {
    this.BeamSweepSync = BeamSweepSync;
  }

  public EventIdentifierStruct getEventIdentifier() {
    return this.EventIdentifier;
  }

  public void setEventIdentifier(EventIdentifierStruct EventIdentifier) {
    this.EventIdentifier = EventIdentifier;
  }

  public FundamentalParameterDataStruct[] getFundamentalParameterData() {
    return this.FundamentalParameterData;
  }

  public void setFundamentalParameterData(
      FundamentalParameterDataStruct[] FundamentalParameterData) {
    this.FundamentalParameterData = FundamentalParameterData;
  }

  public RPRboolean getLayer2DataAvailable() {
    return this.Layer2DataAvailable;
  }

  public void setLayer2DataAvailable(RPRboolean Layer2DataAvailable) {
    this.Layer2DataAvailable = Layer2DataAvailable;
  }

  public IffOperationalParameter1Enum8 getSecondaryOperationalDataParameter1() {
    return this.SecondaryOperationalDataParameter1;
  }

  public void setSecondaryOperationalDataParameter1(
      IffOperationalParameter1Enum8 SecondaryOperationalDataParameter1) {
    this.SecondaryOperationalDataParameter1 = SecondaryOperationalDataParameter1;
  }

  public IffOperationalParameter2Enum8 getSecondaryOperationalDataParameter2() {
    return this.SecondaryOperationalDataParameter2;
  }

  public void setSecondaryOperationalDataParameter2(
      IffOperationalParameter2Enum8 SecondaryOperationalDataParameter2) {
    this.SecondaryOperationalDataParameter2 = SecondaryOperationalDataParameter2;
  }

  public IffSystemModeEnum8 getSystemMode() {
    return this.SystemMode;
  }

  public void setSystemMode(IffSystemModeEnum8 SystemMode) {
    this.SystemMode = SystemMode;
  }

  public IffSystemNameEnum16 getSystemName() {
    return this.SystemName;
  }

  public void setSystemName(IffSystemNameEnum16 SystemName) {
    this.SystemName = SystemName;
  }

  public IffSystemTypeEnum16 getSystemType() {
    return this.SystemType;
  }

  public void setSystemType(IffSystemTypeEnum16 SystemType) {
    this.SystemType = SystemType;
  }

  public RPRboolean getSystemIsOn() {
    return this.SystemIsOn;
  }

  public void setSystemIsOn(RPRboolean SystemIsOn) {
    this.SystemIsOn = SystemIsOn;
  }

  public RPRboolean getSystemIsOperational() {
    return this.SystemIsOperational;
  }

  public void setSystemIsOperational(RPRboolean SystemIsOperational) {
    this.SystemIsOperational = SystemIsOperational;
  }
}
