// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.objects;

import nl.tno.oorti.test.netn4.datatypes.EntityTypeStruct;
import nl.tno.oorti.test.netn4.datatypes.TransmitterOperationalStatusEnum8;

/**
 * This class defines additional attributes for AIS equipment. Depending on the kind of AIS
 * equipment, further attributes are added in sub-classes.
 */
public class AIS_Equipment extends Equipment {

  /**
   * Optional. The MMSI number (Maritime Mobile Service Identity) of the AIS station. If the value
   * is not provided then the subscribing federate that is responsible for the modelling of the AIS
   * station shall generate a value. Note that the value of each AIS station must be unique across
   * all AIS stations in the simulation. Reuse of MMSI numbers if not advised since some systems may
   * retain dead tracks for some time.
   */
  Integer MMSI;

  /**
   * Optional. The callsign of the AIS Station (typically a vessel). The callsign prefix should be
   * in accordance with ITU recommendation for call sign allocation. See
   * https://www.itu.int/en/ITU-R/terrestrial/fmd/Pages/call_sign_series.aspx.
   */
  String Callsign;

  /**
   * Optional. The initial status of the AIS Transmitter(s) of the AIS station. If the value is not
   * provided then the value shall be assumed to be ON.
   */
  TransmitterOperationalStatusEnum8 TransmitterStatus;

  /**
   * Optional. The type of transmitter. If the value is not provided then the subscribing federate
   * that is responsible for the modelling of the AIS station shall determine the type of
   * transmitter.
   */
  EntityTypeStruct RadioSystemType;

  public Integer getMMSI() {
    return this.MMSI;
  }

  public void setMMSI(Integer MMSI) {
    this.MMSI = MMSI;
  }

  public String getCallsign() {
    return this.Callsign;
  }

  public void setCallsign(String Callsign) {
    this.Callsign = Callsign;
  }

  public TransmitterOperationalStatusEnum8 getTransmitterStatus() {
    return this.TransmitterStatus;
  }

  public void setTransmitterStatus(TransmitterOperationalStatusEnum8 TransmitterStatus) {
    this.TransmitterStatus = TransmitterStatus;
  }

  public EntityTypeStruct getRadioSystemType() {
    return this.RadioSystemType;
  }

  public void setRadioSystemType(EntityTypeStruct RadioSystemType) {
    this.RadioSystemType = RadioSystemType;
  }
}
