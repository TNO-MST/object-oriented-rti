// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2025/09/14 01:29:01

package nl.tno.oorti.test.netn4.interactions;

import nl.tno.oorti.test.mim4.interactions.HLAinteractionRoot;
import nl.tno.oorti.test.netn4.datatypes.AcknowledgementProtocolEnum8;
import nl.tno.oorti.test.netn4.datatypes.DatumIdentifierEnum32;
import nl.tno.oorti.test.netn4.datatypes.EntityIdentifierStruct;
import nl.tno.oorti.test.netn4.datatypes.EventTypeEnum32;

/**
 * A Simulation Management (SIMAN) interaction designed to allow a Simulation Manager federate to
 * request data, in record format, from another federate.
 */
public class RecordQueryR extends HLAinteractionRoot {

  /** The DIS entity ID of the entity or application sending the interaction. */
  EntityIdentifierStruct OriginatingEntity;

  /**
   * The DIS entity ID of the entity or application which is the intended recipient(s) of the
   * interaction.
   */
  EntityIdentifierStruct ReceivingEntity;

  /**
   * The Request ID is a monotonically increasing integer identifier inserted by the Simulation
   * Manager into all Simulation management interactions. It is used as a unique identifier to
   * identify the latest in a series of competing requests and identifying acknowledgements.
   */
  Integer RequestIdentifier;

  /**
   * The interval between regular updates of the requested data. If this field is zero then the
   * recipient should only issue a single RecordR interaction in response to this interaction.
   */
  Integer TimeInterval;

  /**
   * Specifies the type of event that the receiving entity or application should use to trigger the
   * issue of a RecordR interaction in response to this query. If this is zero, then reporting shall
   * be periodic based upon the value of the TimeInterval parameter.
   */
  EventTypeEnum32 EventType;

  /** The acknowledgement protocol to be used for the transaction */
  AcknowledgementProtocolEnum8 AcknowledgementProtocol;

  /** Identifies the records for which information is requested */
  DatumIdentifierEnum32[] RecordIdentifiers;

  public EntityIdentifierStruct getOriginatingEntity() {
    return this.OriginatingEntity;
  }

  public void setOriginatingEntity(EntityIdentifierStruct OriginatingEntity) {
    this.OriginatingEntity = OriginatingEntity;
  }

  public EntityIdentifierStruct getReceivingEntity() {
    return this.ReceivingEntity;
  }

  public void setReceivingEntity(EntityIdentifierStruct ReceivingEntity) {
    this.ReceivingEntity = ReceivingEntity;
  }

  public Integer getRequestIdentifier() {
    return this.RequestIdentifier;
  }

  public void setRequestIdentifier(Integer RequestIdentifier) {
    this.RequestIdentifier = RequestIdentifier;
  }

  public Integer getTimeInterval() {
    return this.TimeInterval;
  }

  public void setTimeInterval(Integer TimeInterval) {
    this.TimeInterval = TimeInterval;
  }

  public EventTypeEnum32 getEventType() {
    return this.EventType;
  }

  public void setEventType(EventTypeEnum32 EventType) {
    this.EventType = EventType;
  }

  public AcknowledgementProtocolEnum8 getAcknowledgementProtocol() {
    return this.AcknowledgementProtocol;
  }

  public void setAcknowledgementProtocol(AcknowledgementProtocolEnum8 AcknowledgementProtocol) {
    this.AcknowledgementProtocol = AcknowledgementProtocol;
  }

  public DatumIdentifierEnum32[] getRecordIdentifiers() {
    return this.RecordIdentifiers;
  }

  public void setRecordIdentifiers(DatumIdentifierEnum32[] RecordIdentifiers) {
    this.RecordIdentifiers = RecordIdentifiers;
  }
}
